proof {
  allowed_collisions default^4/large;
   (* We allow eliminating collisions with probability in power 4 of 
      N, Qeperuser, Qdperuser, Qcperuser times PCollKey, to allow q^2 * PCollKey,
      where q = N * (Qeperuser + Qdperuser + Qcperuser) *)
  (* start on the left side *)
  out_game "l1.out.cv";
  (* Let appear this case distinction in the Encap oracle,
     that is present on the right side. *)
  insert after "OAEncap(pk_R"
    "find i1 <= N suchthat
      defined(sk[i1])
      && pk_R = exp(g, sk[i1]) then";
  (* Use unique names for the assignments of the following variables
     that are currently not unique *)
  SArename z;
  SArename enc_1;
  SArename zz_2;
  SArename pkE_2;
  SArename pkS;
  SArename dh_2;
  SArename kemContext_2;
  SArename key;
  SArename info;
  (* Let appear this case distinction in the Decap oracle,
     that is present on the right side *)
  insert after "OADecap(pk_S"
    "find ie1 <= Qeperuser, i1 <= N suchthat
      defined(sk[i1], pk_R[ie1, i1], zz_10[ie1, i1], z_5[ie1, i1], enc_8[ie1, i1])
      && exp(g, sk) = pk_R[ie1, i1]
      && pk_S = exp(g, sk[i1])
      && enc_8[ie1, i1] = enc_2 then";
  out_game "l2.out.cv";
  out_game "l2occ.out.cv" occ;
  (* Use correctness of the KEM: In the Decap oracle for honest
     participants, return the key chosen in the Encap oracle.
     This replacement is done at the 1st line that matches the regex,
     at the 3rd term/occurrence number within the match (zz_3). *)
  replace
    at_nth 1 3 "return{[0-9]*}({[0-9]*}AuthDecap_Some({[0-9]*}zz_3))"
    "zz_10[ie1_2, i1_8]";
  all_simplify;
  (* Make it possible to reason about the composition of the
     random oracle inputs, specifically the group elements,
     which is needed for the usage of the GDH assumption. *)
  insert after "OH(x1"
    "let eae_input(
      salt: extract_salt_t,
      concatExtract(
        protocol1: label_protocol_t,
        suite1: suite_id_t,
        label1: label_extract_t,
        concatDH(dh1: G_t, dh2: G_t)),
      concatExpand(
        l: two_byte_t,
        protocol2: label_protocol_t,
        suite2: suite_id_t,
        label2: label_expand_t,
        concatContext(pkE': G_t, pkR': G_t, pkS': G_t))) = x1 in";
  out_game "l3.out.cv";
  crypto rom(ExtractAndExpand_inner);
  out_game "l4.out.cv";
  (* Apply the GDH assumption, where the longterm static key sk, and
     the ephemeral key z_5 (generated in the Encaps oracle in the case
     of honest participants), are considered uncompromised. *)
  crypto gdh(exp) [variables: sk -> a, z_5 -> b];
  out_game "l5.out.cv";

  (* go to the right side *)
  start_from_other_end;
  out_game "r1.out.cv";
  (* Make it possible to reason about the composition of the
     random oracle inputs, specifically the group elements,
     which is needed for the usage of the GDH assumption. *)
  insert after "OH(x1"
    "let eae_input(
      salt: extract_salt_t,
      concatExtract(
        protocol1: label_protocol_t,
        suite1: suite_id_t,
        label1: label_extract_t,
        concatDH(dh1: G_t, dh2: G_t)),
      concatExpand(l: two_byte_t,
        protocol2: label_protocol_t,
        suite2: suite_id_t,
        label2: label_expand_t,
        concatContext(pkE'': G_t, pkR'': G_t, pkS'': G_t))) = x1_1 in";
  crypto rom(ExtractAndExpand_inner);
  out_game "r2.out.cv";
  success
}

include(`common.dhkem.dh.ocv')

proba Adv_GDH.
proba PDistRerandom.
expand GDH_RSR_minimal(
  (* types *)
  G_t,  (* Group elements *)
  Z_t,  (* Exponents *)
  (* variables *)
  g,    (* a generator of the group *)
  exp,  (* exponentiation function *)
  mult, (* multiplication function for exponents *)
  (* probabilities *)
  Adv_GDH, (* probability of breaking the GDH assumption *)
  PDistRerandom (* probability of distinguishing a key that comes from 
       rerandomization from an honestly chosen key *)
).

include(`common.dhkem.ocv')

param N, Qeperuser, Qdperuser.

equivalence
  Ostart() :=
    key_extr <-R hash_key_t;
    return();
    ((
      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ie <= Qeperuser do (
	  OAEncap(pk_R: G_t) :=
            return(AuthEncap(key_extr, pk_R, skgen(sk)))) |
        foreach id <= Qdperuser do (
	  OADecap(pk_S: G_t, enc: bitstring) :=
            return(AuthDecap(key_extr, enc, skgen(sk), pk_S))) |
	(* The next oracle gives the public key to the adversary *)
        Opk() := return(pkgen(sk))
      )) |
      (* The random oracle ExtractAndExpand_inner *)
      run ExtractAndExpand_inner_orcl(key_extr)
    )

  Ostart() :=
    key_extr <-R hash_key_t;
    return();
    ((
      foreach i <= N do Osetup() := sk <-R Z_t; return(); (
        foreach ie <= Qeperuser do (
	  OAEncap(pk_R: G_t) :=
            find i1 <= N suchthat defined(sk[i1]) && pk_R = pkgen(sk[i1]) then (
              let AuthEncap_tuple(k: eae_output_t, ce: bitstring) = AuthEncap(key_extr, pk_R, skgen(sk)) in (
                k' <-R eae_output_t;
                return(AuthEncap_tuple(k', ce))
	      )
	      else (
	        (* Never happens because AuthEncap always returns AuthEncap_tuple(...) *)
                return(AuthEncap_None)
              )
            ) else (
              return(AuthEncap(key_extr, pk_R, skgen(sk)))
            )) |
        foreach id <= Qdperuser do (
	  OADecap(pk_S: G_t, cd: bitstring) :=
	    (* This "find" implements a lookup in the set E of the paper.
               The set is not built explicitly; we look for values in
               encryption queries using arrays -- all variables are implicitly
               stored in arrays indexed by replication indices above their
               definition. *)
            find ie1 <= Qeperuser, i1 <= N suchthat
              defined(sk[i1], pk_R[ie1, i1], k'[ie1, i1], ce[ie1, i1]) &&
                pkgen(sk) = pk_R[ie1, i1] && pkgen(sk[i1]) = pk_S && ce[ie1, i1] = cd then (
              return(AuthDecap_Some(k'[ie1, i1]))
            ) else (
              return(AuthDecap(key_extr, cd, skgen(sk), pk_S))
            )) |
        Opk() := return(pkgen(sk))
      )) |
      run ExtractAndExpand_inner_orcl(key_extr)
    )
